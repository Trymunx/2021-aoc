import 'ren/array' as Array
import 'ren/console' as Console
import 'ren/file' as File
import 'ren/string' as String
import 'ren/result' as Result
import 'ren/maybe' as Maybe
import 'ren/math' as Math
import 'ren/bitwise' as Bitwise

pub fun main = [ year, day, part ] => {
    let parse = String.split "\\n" >> Array.filterMap parseInput
    let input = File.open './input.txt' { sync: true } |> Result.map parse

    let test = [
      "00100",
      "11110",
      "10110",
      "10111",
      "10101",
      "01111",
      "00111",
      "11100",
      "10000",
      "11001",
      "00010",
      "01010"
    ]

    ret when [ input, part ]
      is [ #ok numbers, '1' ] => solvePartOne numbers
      is [ #ok numbers, '2' ] => solvePartTwo numbers
      is [ #err e, _ ]        => Console.error e
      is [ _, 'test1' ]       => solvePartOne (Array.filterMap parseInput test)
      is [ _, 'test2' ]       => solvePartTwo (Array.filterMap parseInput test)
      else                    => Console.warn `Unknown part: "${part}".`
}

fun parseInput = line => {
  ret String.split "" line
}

fun lineToArr = array splitLine => {
  ret Array.map2 Array.cons splitLine array
}

// This only finds the mode of arrays of 0s and 1s
fun mode = arr => {
  let zeros = Array.filter Logic.not arr
  ret if Array.length zeros > (Array.length arr) / 2 then 0 else 1
}

fun solvePartOne = input => {
  let splitLines = Array.map (String.split "") input
  let combinedByPos = Array.foldl lineToArr [[], [], [], [], []] input

  ret Array.map mode combinedByPos
}

fun solvePartTwo = input => {
  ret Console.log input
}
