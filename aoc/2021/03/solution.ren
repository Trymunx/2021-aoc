import 'ren/array' as Array
import 'ren/console' as Console
import 'ren/file' as File
import 'ren/string' as String
import 'ren/result' as Result
import 'ren/maybe' as Maybe
import 'ren/math' as Math
import 'ren/bitwise' as Bitwise
import 'ren/compare' as Compare

pub fun main = [ year, day, part ] => {
    let parse = String.trim >> String.split "\\n"
    let input = File.open './input.txt' { sync: true } |> Result.map parse

    let test = [
      "00100",
      "11110",
      "10110",
      "10111",
      "10101",
      "01111",
      "00111",
      "11100",
      "10000",
      "11001",
      "00010",
      "01010"
    ]

    ret when [ input, part ]
      is [ #ok numbers, '1' ] => solvePartOne numbers
      is [ #ok numbers, '2' ] => solvePartTwo numbers
      is [ #err e, _ ]        => Console.error e
      is [ _, 'test1' ]       => solvePartOne test
      is [ _, 'test2' ]       => solvePartTwo test
      else                    => Console.warn `Unknown part: "${part}".`
}

fun lineToCol = array line => {
  ret Array.map2 Array.cons line array
}

// This only finds the mode of arrays of 0s and 1s
fun mode = arr => {
  let zeros = Array.filter (fun x => x == "0") arr
  let comparison = Compare.gt
  ret if comparison (Array.length zeros) ((Array.length arr) / 2) then "0" else "1"
}

fun solvePartOne = input => {
  let lineLen = Array.length input[0]
  let bitSize = Math.pow 2 lineLen - 1
  
  let modeValue = Array.map (String.split "") input
    |> Array.foldl lineToCol (Array.repeat lineLen [])
    |> Array.map mode
    |> String.join ""
    |> String.toInt 2

  ret when modeValue
    is #just x => x * Math.xor bitSize x
    else => #nothing
}

fun solvePartTwo = input => {
  let searchArr = Array.map (String.split "") input
  let oxy =  sensorRating 0 "oxygen" searchArr
  let co2 =  sensorRating 0 "co2" searchArr
  ret when [ oxy, co2 ]
    is [ #just o, #just c ] => o * c
    else => #nothing
}

fun sensorRating = digit sensor searchArr => {
  let cols = arrToCols searchArr

  ret when (Array.length searchArr)
    is 1 => String.join "" searchArr[0] |> String.toInt 2
    else => mode cols[digit] 
      |> (fun x => if sensor == "oxygen" then x else inverse x)
      |> filterByNthDigit digit searchArr
      |> sensorRating (digit + 1) sensor
}

fun arrToCols = arr => {
  ret Array.foldl lineToCol (Array.repeat (Array.length arr[0]) []) arr
}

fun filterByNthDigit = index arr match => {
  ret Array.filter (fun x => x[index] == match) arr
}

fun inverse = n => {
  ret if n == "1" then "0" else "1"
}
